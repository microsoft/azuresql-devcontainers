/*
Deployment script for Library

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Library"
:setvar DefaultFilePrefix "Library"
:setvar DefaultDataPath "/var/opt/mssql/data/"
:setvar DefaultLogPath "/var/opt/mssql/data/"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating SqlTable [dbo].[authors]...';


GO
CREATE TABLE [dbo].[authors] (
    [id]          INT            NOT NULL,
    [first_name]  NVARCHAR (100) NOT NULL,
    [middle_name] NVARCHAR (100) NULL,
    [last_name]   NVARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating SqlTable [dbo].[books]...';


GO
CREATE TABLE [dbo].[books] (
    [id]    INT             NOT NULL,
    [title] NVARCHAR (1000) NOT NULL,
    [year]  INT             NULL,
    [pages] INT             NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating SqlTable [dbo].[books_authors]...';


GO
CREATE TABLE [dbo].[books_authors] (
    [author_id] INT NOT NULL,
    [book_id]   INT NOT NULL,
    PRIMARY KEY CLUSTERED ([author_id] ASC, [book_id] ASC)
);


GO
PRINT N'Creating SqlIndex [dbo].[books_authors].[ixnc1]...';


GO
CREATE NONCLUSTERED INDEX [ixnc1]
    ON [dbo].[books_authors]([book_id] ASC, [author_id] ASC);


GO
PRINT N'Creating SqlSequence [dbo].[globalId]...';


GO
CREATE SEQUENCE [dbo].[globalId]
    AS INT
    START WITH 1000000
    INCREMENT BY 1;


GO
PRINT N'Creating SqlDefaultConstraint unnamed constraint on [dbo].[authors]...';


GO
ALTER TABLE [dbo].[authors]
    ADD DEFAULT (NEXT VALUE FOR [dbo].[globalId]) FOR [id];


GO
PRINT N'Creating SqlDefaultConstraint unnamed constraint on [dbo].[books]...';


GO
ALTER TABLE [dbo].[books]
    ADD DEFAULT (NEXT VALUE FOR [dbo].[globalId]) FOR [id];


GO
PRINT N'Creating SqlForeignKeyConstraint unnamed constraint on [dbo].[books_authors]...';


GO
ALTER TABLE [dbo].[books_authors]
    ADD FOREIGN KEY ([author_id]) REFERENCES [dbo].[authors] ([id]);


GO
PRINT N'Creating SqlForeignKeyConstraint unnamed constraint on [dbo].[books_authors]...';


GO
ALTER TABLE [dbo].[books_authors]
    ADD FOREIGN KEY ([book_id]) REFERENCES [dbo].[books] ([id]);


GO
PRINT N'Creating SqlView [dbo].[vw_books_details]...';


GO

create   view dbo.vw_books_details
as
    with
        aggregated_authors
        as
        (
            select
                ba.book_id,
                string_agg(concat(a.first_name, ' ', (a.middle_name + ' '), a.last_name), ', ') as authors
            from
                dbo.books_authors ba
                inner join
                dbo.authors a on ba.author_id = a.id
            group by
        ba.book_id
        )
    select
        b.id,
        b.title,
        b.pages,
        b.[year],
        aa.authors
    from
        dbo.books b
        inner join
        aggregated_authors aa on b.id = aa.book_id
GO
PRINT N'Creating SqlProcedure [dbo].[stp_get_all_cowritten_books_by_author]...';


GO

create   procedure dbo.stp_get_all_cowritten_books_by_author
    @author nvarchar(100),
    @searchType char(1) = 'c'
as

declare @authorSearchString nvarchar(110);

if @searchType = 'c' 
    set @authorSearchString = '%' + @author + '%' -- contains
else if @searchType = 's' 
    set @authorSearchString = @author + '%' -- startswith
else 
    throw 50000, '@searchType must be set to "c" or "s"', 16;

with
    aggregated_authors
    as
    (
        select
            ba.book_id,
            string_agg(concat(a.first_name, ' ', (a.middle_name + ' '), a.last_name), ', ') as authors,
            author_count = count(*)
        from
            dbo.books_authors ba
            inner join
            dbo.authors a on ba.author_id = a.id
        group by
        ba.book_id
    )
select
    b.id,
    b.title,
    b.pages,
    b.[year],
    aa.authors
from
    dbo.books b
    inner join
    aggregated_authors aa on b.id = aa.book_id
    inner join
    dbo.books_authors ba on b.id = ba.book_id
    inner join
    dbo.authors a on a.id = ba.author_id
where
    aa.author_count > 1
    and
    (
        concat(a.first_name, ' ', (a.middle_name + ' '), a.last_name) like @authorSearchString
    or
    concat(a.first_name, ' ', a.last_name) like @authorSearchString
);
GO
-- This file contains SQL statements that will be executed after the build script.
-- Authors data
---------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM dbo.authors WHERE id = 1)
BEGIN
    INSERT INTO dbo.authors (id, first_name, middle_name, last_name)
    VALUES (1, 'Isaac', 'Yudovick', 'Asimov')
END;

IF NOT EXISTS (SELECT 1 FROM dbo.authors WHERE id = 2)
BEGIN
    INSERT INTO dbo.authors (id, first_name, middle_name, last_name)
    VALUES (2, 'Arthur', 'Charles', 'Clarke')
END;

IF NOT EXISTS (SELECT 1 FROM dbo.authors WHERE id = 3)
BEGIN
    INSERT INTO dbo.authors (id, first_name, middle_name, last_name)
    VALUES (3, 'Herbert', 'George', 'Wells')
END;

IF NOT EXISTS (SELECT 1 FROM dbo.authors WHERE id = 4)
BEGIN
    INSERT INTO dbo.authors (id, first_name, middle_name, last_name)
    VALUES (4, 'Jules', 'Gabriel', 'Verne')
END;

IF NOT EXISTS (SELECT 1 FROM dbo.authors WHERE id = 5)
BEGIN
    INSERT INTO dbo.authors (id, first_name, middle_name, last_name)
    VALUES (5, 'Philip', 'Kindred', 'Dick')
END;
GO

-- Books data
---------------------------------------------------------------------------
IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1000)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1000, 'Prelude to Foundation', 1988, 403)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1001)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1001, 'Forward the Foundation', 1993, 417)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1002)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1002, 'Foundation', 1951, 255)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1003)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1003, 'Foundation and Empire', 1952, 247)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1004)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1004, 'Second Foundation', 1953, 210)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1005)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1005, 'Foundation''s Edge', 1982, 367)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1006)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1006, 'Foundation and Earth', 1986, 356)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1007)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1007, 'Nemesis', 1989, 386)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1008)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1008, '2001: A Space Odyssey', 1968, 221)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1009)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1009, '2010: Odyssey Two', 1982, 291)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1010)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1010, '2061: Odyssey Three ', 1987, 256)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1011)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1011, '3001: The Final Odyssey ', 1997, 288)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1012)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1012, 'The Time Machine', 1895, 118)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1013)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1013, 'The Island of Doctor Moreau', 1896, 153)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1014)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1014, 'The Invisible Man', 1897, 151)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1015)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1015, 'The War of the Worlds', 1898, 192)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1016)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1016, 'Journey to the Center of the Earth', 1864, 183)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1017)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1017, 'Twenty Thousand Leagues Under the Sea', 1870, 187)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1018)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1018, 'Around the World in Eighty Days', 1873, 167)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1019)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1019, 'From the Earth to the Moon', 1865, 186)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1020)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1020, 'Do Androids Dream of Electric Sheep?', 1968, 244)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1021)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1021, 'Ubik', 1969, 224)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1022)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1022, 'The Man in the High Castle', 1962, 259)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books WHERE id = 1023)
BEGIN
    INSERT INTO dbo.books (id, title, year, pages)
    VALUES (1023, 'A Scanner Darkly', 1977, 224)
END;
GO

-- Books + Authors data
---------------------------------------------------------------------------
-- Insert records for author 1
IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1000)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1000)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1001)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1001)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1002)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1002)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1003)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1003)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1004)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1004)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1005)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1005)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1006)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1006)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 1 AND book_id = 1007)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (1, 1007)
END;

-- Insert records for author 2
IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 2 AND book_id = 1008)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (2, 1008)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 2 AND book_id = 1009)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (2, 1009)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 2 AND book_id = 1010)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (2, 1010)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 2 AND book_id = 1011)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (2, 1011)
END;

-- Insert records for author 3
IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 3 AND book_id = 1012)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (3, 1012)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 3 AND book_id = 1013)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (3, 1013)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 3 AND book_id = 1014)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (3, 1014)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 3 AND book_id = 1015)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (3, 1015)
END;

-- Insert records for author 4
IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 4 AND book_id = 1016)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (4, 1016)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 4 AND book_id = 1017)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (4, 1017)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 4 AND book_id = 1018)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (4, 1018)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 4 AND book_id = 1019)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (4, 1019)
END;

-- Insert records for author 5
IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 5 AND book_id = 1020)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (5, 1020)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 5 AND book_id = 1021)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (5, 1021)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 5 AND book_id = 1022)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (5, 1022)
END;

IF NOT EXISTS (SELECT 1 FROM dbo.books_authors WHERE author_id = 5 AND book_id = 1023)
BEGIN
    INSERT INTO dbo.books_authors (author_id, book_id)
    VALUES (5, 1023)
END;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
